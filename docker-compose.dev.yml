version: '3.3'

services:
  api:
    build:
      context: .
      dockerfile: src/Dockerfile
    hostname: base_fastapi_api
    restart: on-failure
    depends_on:
      - db
      - redis
      - minio
    environment:
      ENVIRONMENT: ${ENVIRONMENT}

      CORS_ALLOW_ORIGIN_LIST: ${CORS_ALLOW_ORIGIN_LIST}

      REDIS_DSN: ${REDIS_DSN}

      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      S3_DSN: ${S3_DSN}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION_NAME: ${S3_REGION_NAME}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    command: uvicorn main:app --host 0.0.0.0 --port 8000

  db:
    image: postgres:15.2
    restart: on-failure
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_PASSWORD}
      interval: 30s
      timeout: 3s
      retries: 3

  redis:
    image: redis/redis-stack:7.2.0-RC1
    restart: on-failure
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    build: ./nginx/dev
    restart: on-failure
    ports:
      - "8081:8081"
      - "8082:8082"
    depends_on:
      - minio
      - api

volumes:
  postgres_data:
  minio_data:
